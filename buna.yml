title: "09-2. ぶな配列"

# ===== Aliases =====

aliases:

# ----- Modifier Keys -----

- from/modifiers: &optional_shift_key
    optional:
    - shift

- from/modifiers: &mandatory_shift_key
    mandatory:
    - shift

- to/modifiers: &to_shift_key
  - shift

# ----- Conditions -----

- conditions: &symbol_mode
  - type: variable_if
    name: is_buna_layout
    value: 1
  - type: variable_if
    name: symbol_mode
    value: 1
  - type: frontmost_application_unless
    bundle_identifiers:
    - "^com\\.apple\\.loginwindow$"

- conditions: &left_shifted_state
  - type: input_source_if
    input_sources:
    - language: ja
  - type: variable_if
    name: is_buna_layout
    value: 1
  - type: variable_unless
    name: kanchoku_mode
    value: 1
  - type: variable_unless
    name: symbol_mode
    value: 1
  - type: variable_if
    name: left_shift
    value: 1
  - type: frontmost_application_unless
    bundle_identifiers:
    - "^com\\.apple\\.loginwindow$"

- conditions: &right_shifted_state
  - type: input_source_if
    input_sources:
    - language: ja
  - type: variable_if
    name: is_buna_layout
    value: 1
  - type: variable_unless
    name: kanchoku_mode
    value: 1
  - type: variable_unless
    name: symbol_mode
    value: 1
  - type: variable_if
    name: right_shift
    value: 1
  - type: frontmost_application_unless
    bundle_identifiers:
    - "^com\\.apple\\.loginwindow$"

- conditions: &base_state
  - type: input_source_if
    input_sources:
    - language: ja
  - type: variable_if
    name: is_buna_layout
    value: 1
  - type: variable_unless
    name: kanchoku_mode
    value: 1
  - type: variable_unless
    name: symbol_mode
    value: 1
  - type: variable_unless
    name: left_shift
    value: 1
  - type: variable_unless
    name: right_shift
    value: 1
  - type: frontmost_application_unless
    bundle_identifiers:
    - "^com\\.apple\\.loginwindow$"

# ===== Rules =====

rules:
- description: "[Japanese Input] ぶな配列"
  manipulators:

# ----- 同時打鍵 → 記号 -----

  # RF → 中黒
  - type: basic
    from:
      simultaneous:
      - key_code: r
      - key_code: f
    to:
    - key_code: quote
      modifiers: *to_shift_key
      repeat: false
    conditions: *base_state

  # RG → 中黒
  - type: basic
    from:
      simultaneous:
      - key_code: r
      - key_code: g
    to:
    - key_code: quote
      modifiers: *to_shift_key
      repeat: false
    conditions: *base_state

  # FV → 感嘆符
  - type: basic
    from:
      simultaneous:
      - key_code: f
      - key_code: v
    to:
    - key_code: "1"
      modifiers: *to_shift_key
      repeat: false
    conditions: *base_state

  # FB → 感嘆符
  - type: basic
    from:
      simultaneous:
      - key_code: f
      - key_code: b
    to:
    - key_code: "1"
      modifiers: *to_shift_key
      repeat: false
    conditions: *base_state

  # UJ → スラッシュ
  - type: basic
    from:
      simultaneous:
      - key_code: u
      - key_code: j
    to:
    - key_code: slash
      repeat: false
    conditions: *base_state

  # UH → スラッシュ
  - type: basic
    from:
      simultaneous:
      - key_code: u
      - key_code: h
    to:
    - key_code: slash
      repeat: false
    conditions: *base_state

  # JM → 疑問符
  - type: basic
    from:
      simultaneous:
      - key_code: j
      - key_code: m
    to:
    - key_code: slash
      modifiers: *to_shift_key
      repeat: false
    conditions: *base_state

  # JN → 疑問符
  - type: basic
    from:
      simultaneous:
      - key_code: j
      - key_code: "n"
    to:
    - key_code: slash
      modifiers: *to_shift_key
      repeat: false
    conditions: *base_state

  # FG → 鉤括弧
  - type: basic
    from:
      simultaneous:
      - key_code: f
      - key_code: g
    to:
    - key_code: open_bracket
    - key_code: close_bracket
    - key_code: left_arrow
      repeat: false
    conditions: *base_state

  # HJ → 丸括弧
  - type: basic
    from:
      simultaneous:
      - key_code: h
      - key_code: j
    to:
    - key_code: "9"
      modifiers: *to_shift_key
    - key_code: "0"
      modifiers: *to_shift_key
    - key_code: left_arrow
      repeat: false
    conditions: *base_state

# ----- 中指シフト（左） -----

  # さ
  - type: basic
    from:
      key_code: s
      modifiers: *optional_shift_key
    to:
    - key_code: s
    - key_code: a
      repeat: false
    conditions: *left_shifted_state

  # ぬ
  - type: basic
    from:
      key_code: "y"
      modifiers: *optional_shift_key
    to:
    - key_code: "n"
    - key_code: u
      repeat: false
    conditions: *left_shifted_state

  # ひ
  - type: basic
    from:
      key_code: h
      modifiers: *optional_shift_key
    to:
    - key_code: h
    - key_code: i
      repeat: false
    conditions: *left_shifted_state

  # む
  - type: basic
    from:
      key_code: m
      modifiers: *optional_shift_key
    to:
    - key_code: m
    - key_code: u
      repeat: false
    conditions: *left_shifted_state

  # め
  - type: basic
    from:
      key_code: k
      modifiers: *optional_shift_key
    to:
    - key_code: m
    - key_code: e
      repeat: false
    conditions: *left_shifted_state

  # ゆ
  - type: basic
    from:
      key_code: v
      modifiers: *optional_shift_key
    to:
    - key_code: "y"
    - key_code: u
      repeat: false
    conditions: *left_shifted_state

  # ら
  - type: basic
    from:
      key_code: l
      modifiers: *optional_shift_key
    to:
    - key_code: r
    - key_code: a
      repeat: false
    conditions: *left_shifted_state

  # を
  - type: basic
    from:
      key_code: j
      modifiers: *optional_shift_key
    to:
    - key_code: w
    - key_code: o
      repeat: false
    conditions: *left_shifted_state

  # ぎ
  - type: basic
    from:
      key_code: comma
      modifiers: *optional_shift_key
    to:
    - key_code: g
    - key_code: i
      repeat: false
    conditions: *left_shifted_state

  # ぐ
  - type: basic
    from:
      key_code: period
      modifiers: *optional_shift_key
    to:
    - key_code: g
    - key_code: u
      repeat: false
    conditions: *left_shifted_state

  # げ
  - type: basic
    from:
      key_code: i
      modifiers: *optional_shift_key
    to:
    - key_code: g
    - key_code: e
      repeat: false
    conditions: *left_shifted_state

  # じ
  - type: basic
    from:
      key_code: o
      modifiers: *optional_shift_key
    to:
    - key_code: z
    - key_code: i
      repeat: false
    conditions: *left_shifted_state

  # ず
  - type: basic
    from:
      key_code: "n"
      modifiers: *optional_shift_key
    to:
    - key_code: z
    - key_code: u
      repeat: false
    conditions: *left_shifted_state

  # ぜ
  - type: basic
    from:
      key_code: g
      modifiers: *optional_shift_key
    to:
    - key_code: z
    - key_code: e
      repeat: false
    conditions: *left_shifted_state

  # ぞ
  - type: basic
    from:
      key_code: x
      modifiers: *optional_shift_key
    to:
    - key_code: z
    - key_code: o
      repeat: false
    conditions: *left_shifted_state

  # ぢ
  - type: basic
    from:
      key_code: e
      modifiers: *optional_shift_key
    to:
    - key_code: d
    - key_code: i
      repeat: false
    conditions: *left_shifted_state

  # づ
  - type: basic
    from:
      key_code: q
      modifiers: *optional_shift_key
    to:
    - key_code: d
    - key_code: u
      repeat: false
    conditions: *left_shifted_state

  # ば
  - type: basic
    from:
      key_code: a
      modifiers: *optional_shift_key
    to:
    - key_code: b
    - key_code: a
      repeat: false
    conditions: *left_shifted_state

  # ぶ
  - type: basic
    from:
      key_code: semicolon
      modifiers: *optional_shift_key
    to:
    - key_code: b
    - key_code: u
      repeat: false
    conditions: *left_shifted_state

  # ぱ
  - type: basic
    from:
      key_code: u
      modifiers: *optional_shift_key
    to:
    - key_code: p
    - key_code: a
      repeat: false
    conditions: *left_shifted_state

  # ぴ
  - type: basic
    from:
      key_code: z
      modifiers: *optional_shift_key
    to:
    - key_code: p
    - key_code: i
      repeat: false
    conditions: *left_shifted_state

  # # ぷ
  # # Symbol mode keys で定義
  # - type: basic
  #   from:
  #     key_code: r
  #     modifiers: *optional_shift_key
  #   to:
  #   - key_code: p
  #   - key_code: u
  #     repeat: false
  #   conditions: *left_shifted_state

  # ぽ
  - type: basic
    from:
      key_code: slash
      modifiers: *optional_shift_key
    to:
    - key_code: p
    - key_code: o
      repeat: false
    conditions: *left_shifted_state

  # ゔ
  - type: basic
    from:
      key_code: b
      modifiers: *optional_shift_key
    to:
    - key_code: v
    - key_code: u
      repeat: false
    conditions: *left_shifted_state

  # ぅ
  - type: basic
    from:
      key_code: t
      modifiers: *optional_shift_key
    to:
    - key_code: x
    - key_code: u
      repeat: false
    conditions: *left_shifted_state

  # ゃ
  - type: basic
    from:
      key_code: p
      modifiers: *optional_shift_key
    to:
    - key_code: x
    - key_code: "y"
    - key_code: a
      repeat: false
    conditions: *left_shifted_state

  # ゅ
  - type: basic
    from:
      key_code: f
      modifiers: *optional_shift_key
    to:
    - key_code: x
    - key_code: "y"
    - key_code: u
      repeat: false
    conditions: *left_shifted_state

  # （未定義）
  - type: basic
    from:
      key_code: w
      modifiers: *optional_shift_key
    to:
    - set_variable:
        name: left_shift
        value: 0
    conditions: *left_shifted_state

  # （未定義）
  - type: basic
    from:
      key_code: c
      modifiers: *optional_shift_key
    to:
    - set_variable:
        name: left_shift
        value: 0
    conditions: *left_shifted_state

  # （未定義）
  - type: basic
    from:
      key_code: quote
      modifiers: *optional_shift_key
    to:
    - set_variable:
        name: left_shift
        value: 0
    conditions: *left_shifted_state

  # ESC
  - type: basic
    from:
      key_code: escape
      modifiers: *optional_shift_key
    to:
    - set_variable:
        name: left_shift
        value: 0
    conditions: *left_shifted_state

# ----- 中指シフト（右） -----

  # あ
  - type: basic
    from:
      key_code: g
      modifiers: *optional_shift_key
    to:
    - key_code: a
      repeat: false
    conditions: *right_shifted_state

  # え
  - type: basic
    from:
      key_code: o
      modifiers: *optional_shift_key
    to:
    - key_code: e
      repeat: false
    conditions: *right_shifted_state

  # お
  - type: basic
    from:
      key_code: l
      modifiers: *optional_shift_key
    to:
    - key_code: o
      repeat: false
    conditions: *right_shifted_state

  # け
  - type: basic
    from:
      key_code: d
      modifiers: *optional_shift_key
    to:
    - key_code: k
    - key_code: e
      repeat: false
    conditions: *right_shifted_state

  # せ
  - type: basic
    from:
      key_code: s
      modifiers: *optional_shift_key
    to:
    - key_code: s
    - key_code: e
      repeat: false
    conditions: *right_shifted_state

  # # そ
  # # Symbol mode keys で定義
  # - type: basic
  #   from:
  #     key_code: r
  #     modifiers: *optional_shift_key
  #   to:
  #   - key_code: s
  #   - key_code: o
  #     repeat: false
  #   conditions: *right_shifted_state

  # ち
  - type: basic
    from:
      key_code: m
      modifiers: *optional_shift_key
    to:
    - key_code: t
    - key_code: i
      repeat: false
    conditions: *right_shifted_state

  # つ
  - type: basic
    from:
      key_code: j
      modifiers: *optional_shift_key
    to:
    - key_code: t
    - key_code: u
      repeat: false
    conditions: *right_shifted_state

  # ね
  - type: basic
    from:
      key_code: v
      modifiers: *optional_shift_key
    to:
    - key_code: "n"
    - key_code: e
      repeat: false
    conditions: *right_shifted_state

  # ふ
  - type: basic
    from:
      key_code: z
      modifiers: *optional_shift_key
    to:
    - key_code: h
    - key_code: u
      repeat: false
    conditions: *right_shifted_state

  # へ
  - type: basic
    from:
      key_code: t
      modifiers: *optional_shift_key
    to:
    - key_code: h
    - key_code: e
      repeat: false
    conditions: *right_shifted_state

  # ほ
  - type: basic
    from:
      key_code: e
      modifiers: *optional_shift_key
    to:
    - key_code: h
    - key_code: o
      repeat: false
    conditions: *right_shifted_state

  # み
  - type: basic
    from:
      key_code: "n"
      modifiers: *optional_shift_key
    to:
    - key_code: m
    - key_code: i
      repeat: false
    conditions: *right_shifted_state

  # や
  - type: basic
    from:
      key_code: p
      modifiers: *optional_shift_key
    to:
    - key_code: "y"
    - key_code: a
      repeat: false
    conditions: *right_shifted_state

  # よ
  - type: basic
    from:
      key_code: b
      modifiers: *optional_shift_key
    to:
    - key_code: "y"
    - key_code: o
      repeat: false
    conditions: *right_shifted_state

  # ろ
  - type: basic
    from:
      key_code: semicolon
      modifiers: *optional_shift_key
    to:
    - key_code: r
    - key_code: o
      repeat: false
    conditions: *right_shifted_state

  # わ
  - type: basic
    from:
      key_code: a
      modifiers: *optional_shift_key
    to:
    - key_code: w
    - key_code: a
      repeat: false
    conditions: *right_shifted_state

  # ご
  - type: basic
    from:
      key_code: c
      modifiers: *optional_shift_key
    to:
    - key_code: g
    - key_code: o
      repeat: false
    conditions: *right_shifted_state

  # ざ
  - type: basic
    from:
      key_code: x
      modifiers: *optional_shift_key
    to:
    - key_code: z
    - key_code: a
      repeat: false
    conditions: *right_shifted_state

  # ど
  - type: basic
    from:
      key_code: f
      modifiers: *optional_shift_key
    to:
    - key_code: d
    - key_code: o
      repeat: false
    conditions: *right_shifted_state

  # び
  - type: basic
    from:
      key_code: h
      modifiers: *optional_shift_key
    to:
    - key_code: b
    - key_code: i
      repeat: false
    conditions: *right_shifted_state

  # べ
  - type: basic
    from:
      key_code: q
      modifiers: *optional_shift_key
    to:
    - key_code: b
    - key_code: e
      repeat: false
    conditions: *right_shifted_state

  # ぼ
  - type: basic
    from:
      key_code: w
      modifiers: *optional_shift_key
    to:
    - key_code: b
    - key_code: o
      repeat: false
    conditions: *right_shifted_state

  # ぺ
  - type: basic
    from:
      key_code: u
      modifiers: *optional_shift_key
    to:
    - key_code: p
    - key_code: e
      repeat: false
    conditions: *right_shifted_state

  # ぁ
  - type: basic
    from:
      key_code: slash
      modifiers: *optional_shift_key
    to:
    - key_code: x
    - key_code: a
      repeat: false
    conditions: *right_shifted_state

  # ぃ
  - type: basic
    from:
      key_code: period
      modifiers: *optional_shift_key
    to:
    - key_code: x
    - key_code: i
      repeat: false
    conditions: *right_shifted_state

  # ぇ
  - type: basic
    from:
      key_code: i
      modifiers: *optional_shift_key
    to:
    - key_code: x
    - key_code: e
      repeat: false
    conditions: *right_shifted_state

  # ぉ
  - type: basic
    from:
      key_code: comma
      modifiers: *optional_shift_key
    to:
    - key_code: x
    - key_code: o
      repeat: false
    conditions: *right_shifted_state

  # （未定義）
  - type: basic
    from:
      key_code: "y"
      modifiers: *optional_shift_key
    to:
    - set_variable:
        name: right_shift
        value: 0
    conditions: *right_shifted_state

  # （未定義）
  - type: basic
    from:
      key_code: quote
      modifiers: *optional_shift_key
    to:
    - set_variable:
        name: right_shift
        value: 0
    conditions: *right_shifted_state

  # ESC
  - type: basic
    from:
      key_code: escape
      modifiers: *optional_shift_key
    to:
    - set_variable:
        name: right_shift
        value: 0
    conditions: *right_shifted_state

# ----- ベース -----

  # い
  - type: basic
    from:
      key_code: l
      modifiers: *optional_shift_key
    to:
    - key_code: i
      repeat: false
    conditions: *base_state

  # う
  - type: basic
    from:
      key_code: m
      modifiers: *optional_shift_key
    to:
    - key_code: u
      repeat: false
    conditions: *base_state

  # か
  - type: basic
    from:
      key_code: s
      modifiers: *optional_shift_key
    to:
    - key_code: k
    - key_code: a
      repeat: false
    conditions: *base_state

  # き
  - type: basic
    from:
      key_code: p
      modifiers: *optional_shift_key
    to:
    - key_code: k
    - key_code: i
      repeat: false
    conditions: *base_state

  # く
  - type: basic
    from:
      key_code: h
      modifiers: *optional_shift_key
    to:
    - key_code: k
    - key_code: u
      repeat: false
    conditions: *base_state

  # こ
  - type: basic
    from:
      key_code: q
      modifiers: *optional_shift_key
    to:
    - key_code: k
    - key_code: o
      repeat: false
    conditions: *base_state

  # し
  - type: basic
    from:
      key_code: i
      modifiers: *optional_shift_key
    to:
    - key_code: s
    - key_code: i
      repeat: false
    conditions: *base_state

  # す
  - type: basic
    from:
      key_code: v
      modifiers: *optional_shift_key
    to:
    - key_code: s
    - key_code: u
      repeat: false
    conditions: *base_state

  # た
  - type: basic
    from:
      key_code: g
      modifiers: *optional_shift_key
    to:
    - key_code: t
    - key_code: a
      repeat: false
    conditions: *base_state

  # # て
  # # Symbol mode keys で定義
  # - type: basic
  #   from:
  #     key_code: r
  #     modifiers: *optional_shift_key
  #   to:
  #   - key_code: t
  #   - key_code: e
  #     repeat: false
  #   conditions: *base_state

  # と
  - type: basic
    from:
      key_code: semicolon
      modifiers: *optional_shift_key
    to:
    - key_code: t
    - key_code: o
      repeat: false
    conditions: *base_state

  # な
  - type: basic
    from:
      key_code: f
      modifiers: *optional_shift_key
    to:
    - key_code: "n"
    - key_code: a
      repeat: false
    conditions: *base_state

  # に
  - type: basic
    from:
      key_code: w
      modifiers: *optional_shift_key
    to:
    - key_code: "n"
    - key_code: i
      repeat: false
    conditions: *base_state

  # の
  - type: basic
    from:
      key_code: o
      modifiers: *optional_shift_key
    to:
    - key_code: "n"
    - key_code: o
      repeat: false
    conditions: *base_state

  # は
  - type: basic
    from:
      key_code: e
      modifiers: *optional_shift_key
    to:
    - key_code: h
    - key_code: a
      repeat: false
    conditions: *base_state

  # ま
  - type: basic
    from:
      key_code: c
      modifiers: *optional_shift_key
    to:
    - key_code: m
    - key_code: a
      repeat: false
    conditions: *base_state

  # も
  - type: basic
    from:
      key_code: t
      modifiers: *optional_shift_key
    to:
    - key_code: m
    - key_code: o
      repeat: false
    conditions: *base_state

  # り
  - type: basic
    from:
      key_code: "y"
      modifiers: *optional_shift_key
    to:
    - key_code: r
    - key_code: i
      repeat: false
    conditions: *base_state

  # る
  - type: basic
    from:
      key_code: "n"
      modifiers: *optional_shift_key
    to:
    - key_code: r
    - key_code: u
      repeat: false
    conditions: *base_state

  # れ
  - type: basic
    from:
      key_code: slash
      modifiers: *optional_shift_key
    to:
    - key_code: r
    - key_code: e
      repeat: false
    conditions: *base_state

  # ん
  - type: basic
    from:
      key_code: j
      modifiers: *optional_shift_key
    to:
    - key_code: "n"
    - key_code: "n"
      repeat: false
    conditions: *base_state

  # が
  - type: basic
    from:
      key_code: x
      modifiers: *optional_shift_key
    to:
    - key_code: g
    - key_code: a
      repeat: false
    conditions: *base_state

  # だ
  - type: basic
    from:
      key_code: z
      modifiers: *optional_shift_key
    to:
    - key_code: d
    - key_code: a
      repeat: false
    conditions: *base_state

  # で
  - type: basic
    from:
      key_code: a
      modifiers: *optional_shift_key
    to:
    - key_code: d
    - key_code: e
      repeat: false
    conditions: *base_state

  # っ
  - type: basic
    from:
      key_code: u
      modifiers: *optional_shift_key
    to:
    - key_code: x
    - key_code: t
    - key_code: u
      repeat: false
    conditions: *base_state

  # ょ
  - type: basic
    from:
      key_code: b
      modifiers: *optional_shift_key
    to:
    - key_code: x
    - key_code: "y"
    - key_code: o
      repeat: false
    conditions: *base_state

  # 読点
  - type: basic
    from:
      key_code: comma
      modifiers: *optional_shift_key
    to:
    - key_code: comma
      repeat: false
    conditions: *base_state

  # 句点
  - type: basic
    from:
      key_code: period
      modifiers: *optional_shift_key
    to:
    - key_code: period
      repeat: false
    conditions: *base_state

  # 長音符
  - type: basic
    from:
      key_code: quote
      modifiers: *optional_shift_key
    to:
    - key_code: quote
      repeat: false
    conditions: *base_state

# ----- Symbol Mode Keys -----

  # Symbol Mode Key（左シフト時）
  # ぷ
  - type: basic
    from:
      key_code: r
      modifiers: *optional_shift_key
    to_if_alone:
    - key_code: p
    - key_code: u
      repeat: false
    to:
    - set_variable:
        name: symbol_mode
        value: 1
    to_after_key_up:
    - set_variable:
        name: symbol_mode
        value: 0
    conditions: *left_shifted_state

  # Symbol Mode Key（右シフト時）
  # そ
  - type: basic
    from:
      key_code: r
      modifiers: *optional_shift_key
    to_if_alone:
    - key_code: s
    - key_code: o
      repeat: false
    to:
    - set_variable:
        name: symbol_mode
        value: 1
    to_after_key_up:
    - set_variable:
        name: symbol_mode
        value: 0
    conditions: *right_shifted_state

  # Symbol Mode Key（ベース時）
  # て
  - type: basic
    from:
      key_code: r
      modifiers: *optional_shift_key
    to_if_alone:
    - key_code: t
    - key_code: e
      repeat: false
    to:
    - set_variable:
        name: symbol_mode
        value: 1
    to_after_key_up:
    - set_variable:
        name: symbol_mode
        value: 0
    conditions: *base_state

# ----- シフトキー -----

  # 中指シフトキー（左）
  - type: basic
    from:
      key_code: d
      modifiers: *optional_shift_key
    to:
    - set_variable:
        name: left_shift
        value: 1
    to_delayed_action:
      to_if_invoked:
      - set_variable:
          name: left_shift
          value: 0
      to_if_canceled:
      - set_variable:
          name: left_shift
          value: 0
    parameters:
      basic.to_delayed_action_delay_milliseconds: 5000
    conditions:
    - type: input_source_if
      input_sources:
      - language: ja
    - type: variable_if
      name: is_buna_layout
      value: 1
    - type: variable_unless
      name: kanchoku_mode
      value: 1
    - type: variable_unless
      name: symbol_mode
      value: 1
    - type: variable_unless
      name: right_shift
      value: 1
    - type: frontmost_application_unless
      bundle_identifiers:
      - "^com\\.apple\\.loginwindow$"

  # 中指シフトキー（右）
  - type: basic
    from:
      key_code: k
      modifiers: *optional_shift_key
    to:
    - set_variable:
        name: right_shift
        value: 1
    to_delayed_action:
      to_if_invoked:
      - set_variable:
          name: right_shift
          value: 0
      to_if_canceled:
      - set_variable:
          name: right_shift
          value: 0
    parameters:
      basic.to_delayed_action_delay_milliseconds: 5000
    conditions:
    - type: input_source_if
      input_sources:
      - language: ja
    - type: variable_if
      name: is_buna_layout
      value: 1
    - type: variable_unless
      name: kanchoku_mode
      value: 1
    - type: variable_unless
      name: symbol_mode
      value: 1
    - type: variable_unless
      name: left_shift
      value: 1
    - type: frontmost_application_unless
      bundle_identifiers:
      - "^com\\.apple\\.loginwindow$"

# ----- Symbol Mode -----
# 入力される記号は仮名テーブルで定義する

  # Y
  - type: basic
    from:
      key_code: "y"
    to:
    - key_code: backslash
    - key_code: "y"
      repeat: false
    conditions: *symbol_mode

  # U
  - type: basic
    from:
      key_code: u
    to:
    - key_code: backslash
    - key_code: u
      repeat: false
    conditions: *symbol_mode

  # I
  - type: basic
    from:
      key_code: i
    to:
    - key_code: backslash
    - key_code: i
      repeat: false
    conditions: *symbol_mode

  # O
  - type: basic
    from:
      key_code: o
    to:
    - key_code: backslash
    - key_code: o
      repeat: false
    conditions: *symbol_mode

  # P
  - type: basic
    from:
      key_code: p
    to:
    - key_code: backslash
    - key_code: p
      repeat: false
    conditions: *symbol_mode

  # H
  - type: basic
    from:
      key_code: h
    to:
    - key_code: backslash
    - key_code: h
      repeat: false
    conditions: *symbol_mode

  # J
  - type: basic
    from:
      key_code: j
    to:
    - key_code: backslash
    - key_code: j
      repeat: false
    conditions: *symbol_mode

  # K
  - type: basic
    from:
      key_code: k
    to:
    - key_code: backslash
    - key_code: k
      repeat: false
    conditions: *symbol_mode

  # L
  - type: basic
    from:
      key_code: l
    to:
    - key_code: backslash
    - key_code: l
      repeat: false
    conditions: *symbol_mode

  # Semicolon
  - type: basic
    from:
      key_code: semicolon
    to:
    - key_code: backslash
    - key_code: semicolon
      repeat: false
    conditions: *symbol_mode

  # Colon
  - type: basic
    from:
      key_code: semicolon
      modifiers: *mandatory_shift_key
    to:
    - key_code: backslash
    - key_code: semicolon
      modifiers: *to_shift_key
      repeat: false
    conditions: *symbol_mode

  # Single Quote
  - type: basic
    from:
      key_code: quote
    to:
    - key_code: backslash
    - key_code: quote
      repeat: false
    conditions: *symbol_mode

  # Double Quote
  - type: basic
    from:
      key_code: quote
      modifiers: *mandatory_shift_key
    to:
    - key_code: backslash
    - key_code: quote
      modifiers: *to_shift_key
      repeat: false
    conditions: *symbol_mode

  # N
  - type: basic
    from:
      key_code: "n"
    to:
    - key_code: backslash
    - key_code: "n"
      repeat: false
    conditions: *symbol_mode

  # M
  - type: basic
    from:
      key_code: m
    to:
    - key_code: backslash
    - key_code: m
      repeat: false
    conditions: *symbol_mode

  # Comma
  - type: basic
    from:
      key_code: comma
    to:
    - key_code: backslash
    - key_code: comma
      repeat: false
    conditions: *symbol_mode

  # Period
  - type: basic
    from:
      key_code: period
    to:
    - key_code: backslash
    - key_code: period
      repeat: false
    conditions: *symbol_mode

  # Less Than
  - type: basic
    from:
      key_code: comma
      modifiers: *mandatory_shift_key
    to:
    - key_code: backslash
    - key_code: comma
      modifiers: *to_shift_key
      repeat: false
    conditions: *symbol_mode

  # Greater Than
  - type: basic
    from:
      key_code: period
      modifiers: *mandatory_shift_key
    to:
    - key_code: backslash
    - key_code: period
      modifiers: *to_shift_key
      repeat: false
    conditions: *symbol_mode

  # Slash
  - type: basic
    from:
      key_code: slash
    to:
    - key_code: backslash
    - key_code: slash
      repeat: false
    conditions: *symbol_mode

  # Question Mark
  - type: basic
    from:
      key_code: slash
      modifiers: *mandatory_shift_key
    to:
    - key_code: backslash
    - key_code: slash
      modifiers: *to_shift_key
      repeat: false
    conditions: *symbol_mode

  # Bracket
  - type: basic
    from:
      key_code: open_bracket
    to:
    - key_code: backslash
    - key_code: open_bracket
      repeat: false
    conditions: *symbol_mode

  - type: basic
    from:
      key_code: close_bracket
    to:
    - key_code: backslash
    - key_code: close_bracket
      repeat: false
    conditions: *symbol_mode

  # Brace
  - type: basic
    from:
      key_code: open_bracket
      modifiers: *mandatory_shift_key
    to:
    - key_code: backslash
    - key_code: open_bracket
      modifiers: *to_shift_key
      repeat: false
    conditions: *symbol_mode

  - type: basic
    from:
      key_code: close_bracket
      modifiers: *mandatory_shift_key
    to:
    - key_code: backslash
    - key_code: close_bracket
      modifiers: *to_shift_key
      repeat: false
    conditions: *symbol_mode

  # Paren
  - type: basic
    from:
      key_code: "9"
      modifiers: *mandatory_shift_key
    to:
    - key_code: backslash
    - key_code: "9"
      modifiers: *to_shift_key
      repeat: false
    conditions: *symbol_mode

  - type: basic
    from:
      key_code: "0"
      modifiers: *mandatory_shift_key
    to:
    - key_code: backslash
    - key_code: "0"
      repeat: false
      modifiers: *to_shift_key
    conditions: *symbol_mode

# ----- Layout Switching -----

  # ぶな配列 → 新下駄配列
  - type: basic
    from:
      key_code: quote
      modifiers:
        mandatory:
        - left_shift
        - right_control
    to:
    - set_variable:
        name: is_buna_layout
        value: 0
    conditions: *base_state
