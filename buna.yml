title: "9'. ぶな配列"

# ===== Aliases =====

aliases:

# ----- Modifier Keys -----

- from/modifiers: &opt_shift_key
    optional:
    - shift

- from/modifiers: &mand_shift_key
    mandatory:
    - shift

- to/modifiers: &to_shift_key
  - shift

# ----- Conditions -----

- conditions: &symbol_mode
  - type: input_source_if
    input_sources:
    - language: ja
  - type: variable_if
    name: symbol_mode
    value: 1
  - type: frontmost_application_unless
    bundle_identifiers:
    - "^com\\.apple\\.loginwindow$"

- conditions: &left_shifted_state
  - type: input_source_if
    input_sources:
    - language: ja
  - type: variable_unless
    name: symbol_mode
    value: 1
  - type: variable_if
    name: left_shift
    value: 1
  - type: frontmost_application_unless
    bundle_identifiers:
    - "^com\\.apple\\.loginwindow$"

- conditions: &right_shifted_state
  - type: input_source_if
    input_sources:
    - language: ja
  - type: variable_unless
    name: symbol_mode
    value: 1
  - type: variable_if
    name: right_shift
    value: 1
  - type: frontmost_application_unless
    bundle_identifiers:
    - "^com\\.apple\\.loginwindow$"

- conditions: &base_state
  - type: input_source_if
    input_sources:
    - language: ja
  - type: variable_unless
    name: symbol_mode
    value: 1
  - type: variable_unless
    name: left_shift
    value: 1
  - type: variable_unless
    name: right_shift
    value: 1
  - type: frontmost_application_unless
    bundle_identifiers:
    - "^com\\.apple\\.loginwindow$"

# ===== Rules =====

rules:
- description: "[Kana Input] ぶな配列"
  manipulators:

# ----- 同時打鍵 → 記号 -----

  # RF → 中黒
  - type: basic
    from:
      simultaneous:
      - key_code: r
      - key_code: f
    to:
    - key_code: quote
      modifiers: *to_shift_key
      repeat: false
    conditions: *base_state

  # RG → 中黒
  - type: basic
    from:
      simultaneous:
      - key_code: r
      - key_code: g
    to:
    - key_code: quote
      modifiers: *to_shift_key
      repeat: false
    conditions: *base_state

  # FV → 感嘆符
  - type: basic
    from:
      simultaneous:
      - key_code: f
      - key_code: v
    to:
    - key_code: "1"
      modifiers: *to_shift_key
      repeat: false
    conditions: *base_state

  # FB → 感嘆符
  - type: basic
    from:
      simultaneous:
      - key_code: f
      - key_code: b
    to:
    - key_code: "1"
      modifiers: *to_shift_key
      repeat: false
    conditions: *base_state

  # UJ → スラッシュ
  - type: basic
    from:
      simultaneous:
      - key_code: u
      - key_code: j
    to:
    - key_code: slash
      repeat: false
    conditions: *base_state

  # UH → スラッシュ
  - type: basic
    from:
      simultaneous:
      - key_code: u
      - key_code: h
    to:
    - key_code: slash
      repeat: false
    conditions: *base_state

  # JM → 疑問符
  - type: basic
    from:
      simultaneous:
      - key_code: j
      - key_code: m
    to:
    - key_code: slash
      modifiers: *to_shift_key
      repeat: false
    conditions: *base_state

  # JN → 疑問符
  - type: basic
    from:
      simultaneous:
      - key_code: j
      - key_code: "n"
    to:
    - key_code: slash
      modifiers: *to_shift_key
      repeat: false
    conditions: *base_state

  # # FG → 鉤括弧
  # - type: basic
  #   from:
  #     simultaneous:
  #     - key_code: f
  #     - key_code: g
  #   to:
  #   - key_code: open_bracket
  #     repeat: false
  #   - key_code: close_bracket
  #     repeat: false
  #   - key_code: return_or_enter
  #     repeat: false
  #   - key_code: left_arrow
  #     repeat: false
  #   conditions: *base_state

  # # JH → 丸括弧
  # - type: basic
  #   from:
  #     simultaneous:
  #     - key_code: j
  #     - key_code: h
  #   to:
  #   - key_code: "9"
  #     modifiers: *to_shift_key
  #     repeat: false
  #   - key_code: "0"
  #     modifiers: *to_shift_key
  #     repeat: false
  #   - key_code: return_or_enter
  #     repeat: false
  #   - key_code: left_arrow
  #     repeat: false
  #   conditions: *base_state

# ----- シフトキー -----

  # 中指シフト（左）
  - type: basic
    from:
      key_code: d
      modifiers: *opt_shift_key
    to:
    - set_variable:
        name: left_shift
        value: 1
    to_delayed_action:
      to_if_invoked:
      - set_variable:
          name: left_shift
          value: 0
      to_if_canceled:
      - set_variable:
          name: left_shift
          value: 0
    conditions:
    - type: input_source_if
      input_sources:
      - language: ja
    - type: variable_unless
      name: symbol_mode
      value: 1
    - type: variable_unless
      name: right_shift
      value: 1
    - type: frontmost_application_unless
      bundle_identifiers:
      - "^com\\.apple\\.loginwindow$"

  # 中指シフト（右）
  - type: basic
    from:
      key_code: k
      modifiers: *opt_shift_key
    to:
    - set_variable:
        name: right_shift
        value: 1
    to_delayed_action:
      to_if_invoked:
      - set_variable:
          name: right_shift
          value: 0
      to_if_canceled:
      - set_variable:
          name: right_shift
          value: 0
    conditions:
    - type: input_source_if
      input_sources:
      - language: ja
    - type: variable_unless
      name: symbol_mode
      value: 1
    - type: variable_unless
      name: left_shift
      value: 1
    - type: frontmost_application_unless
      bundle_identifiers:
      - "^com\\.apple\\.loginwindow$"

# ----- 中指シフト（左） -----

  # さ
  - type: basic
    from:
      key_code: s
      modifiers: *opt_shift_key
    to:
    - key_code: s
      repeat: false
    - key_code: a
      repeat: false
    conditions: *left_shifted_state

  # ぬ
  - type: basic
    from:
      key_code: "y"
      modifiers: *opt_shift_key
    to:
    - key_code: "n"
      repeat: false
    - key_code: u
      repeat: false
    conditions: *left_shifted_state

  # ひ
  - type: basic
    from:
      key_code: h
      modifiers: *opt_shift_key
    to:
    - key_code: h
      repeat: false
    - key_code: i
      repeat: false
    conditions: *left_shifted_state

  # む
  - type: basic
    from:
      key_code: m
      modifiers: *opt_shift_key
    to:
    - key_code: m
      repeat: false
    - key_code: u
      repeat: false
    conditions: *left_shifted_state

  # め
  - type: basic
    from:
      key_code: k
      modifiers: *opt_shift_key
    to:
    - key_code: m
      repeat: false
    - key_code: e
      repeat: false
    conditions: *left_shifted_state

  # ゆ
  - type: basic
    from:
      key_code: v
      modifiers: *opt_shift_key
    to:
    - key_code: "y"
      repeat: false
    - key_code: u
      repeat: false
    conditions: *left_shifted_state

  # れ
  - type: basic
    from:
      key_code: l
      modifiers: *opt_shift_key
    to:
    - key_code: r
      repeat: false
    - key_code: e
      repeat: false
    conditions: *left_shifted_state

  # を
  - type: basic
    from:
      key_code: j
      modifiers: *opt_shift_key
    to:
    - key_code: w
      repeat: false
    - key_code: o
      repeat: false
    conditions: *left_shifted_state

  # ぎ
  - type: basic
    from:
      key_code: comma
      modifiers: *opt_shift_key
    to:
    - key_code: g
      repeat: false
    - key_code: i
      repeat: false
    conditions: *left_shifted_state

  # ぐ
  - type: basic
    from:
      key_code: period
      modifiers: *opt_shift_key
    to:
    - key_code: g
      repeat: false
    - key_code: u
      repeat: false
    conditions: *left_shifted_state

  # げ
  - type: basic
    from:
      key_code: i
      modifiers: *opt_shift_key
    to:
    - key_code: g
      repeat: false
    - key_code: e
      repeat: false
    conditions: *left_shifted_state

  # じ
  - type: basic
    from:
      key_code: o
      modifiers: *opt_shift_key
    to:
    - key_code: z
      repeat: false
    - key_code: i
      repeat: false
    conditions: *left_shifted_state

  # ず
  - type: basic
    from:
      key_code: "n"
      modifiers: *opt_shift_key
    to:
    - key_code: z
      repeat: false
    - key_code: u
      repeat: false
    conditions: *left_shifted_state

  # ぜ
  - type: basic
    from:
      key_code: g
      modifiers: *opt_shift_key
    to:
    - key_code: z
      repeat: false
    - key_code: e
      repeat: false
    conditions: *left_shifted_state

  # ぞ
  - type: basic
    from:
      key_code: x
      modifiers: *opt_shift_key
    to:
    - key_code: z
      repeat: false
    - key_code: o
      repeat: false
    conditions: *left_shifted_state

  # ぢ
  - type: basic
    from:
      key_code: e
      modifiers: *opt_shift_key
    to:
    - key_code: d
      repeat: false
    - key_code: i
      repeat: false
    conditions: *left_shifted_state

  # づ
  - type: basic
    from:
      key_code: q
      modifiers: *opt_shift_key
    to:
    - key_code: d
      repeat: false
    - key_code: u
      repeat: false
    conditions: *left_shifted_state

  # ば
  - type: basic
    from:
      key_code: a
      modifiers: *opt_shift_key
    to:
    - key_code: b
      repeat: false
    - key_code: a
      repeat: false
    conditions: *left_shifted_state

  # ぶ
  - type: basic
    from:
      key_code: semicolon
      modifiers: *opt_shift_key
    to:
    - key_code: b
      repeat: false
    - key_code: u
      repeat: false
    conditions: *left_shifted_state

  # ぱ
  - type: basic
    from:
      key_code: u
      modifiers: *opt_shift_key
    to:
    - key_code: p
      repeat: false
    - key_code: a
      repeat: false
    conditions: *left_shifted_state

  # ぴ
  - type: basic
    from:
      key_code: z
      modifiers: *opt_shift_key
    to:
    - key_code: p
      repeat: false
    - key_code: i
      repeat: false
    conditions: *left_shifted_state

  # ぷ
  # Symbol mode で定義
  - type: basic
    from:
      key_code: r
      modifiers: *opt_shift_key
    to:
    - key_code: p
      repeat: false
    - key_code: u
      repeat: false
    conditions: *left_shifted_state

  # ぽ
  - type: basic
    from:
      key_code: slash
      modifiers: *opt_shift_key
    to:
    - key_code: p
      repeat: false
    - key_code: o
      repeat: false
    conditions: *left_shifted_state

  # ゔ
  - type: basic
    from:
      key_code: b
      modifiers: *opt_shift_key
    to:
    - key_code: v
      repeat: false
    - key_code: u
      repeat: false
    conditions: *left_shifted_state

  # ぅ
  - type: basic
    from:
      key_code: t
      modifiers: *opt_shift_key
    to:
    - key_code: x
      repeat: false
    - key_code: u
      repeat: false
    conditions: *left_shifted_state

  # ゃ
  - type: basic
    from:
      key_code: p
      modifiers: *opt_shift_key
    to:
    - key_code: x
      repeat: false
    - key_code: "y"
      repeat: false
    - key_code: a
      repeat: false
    conditions: *left_shifted_state

  # ゅ
  - type: basic
    from:
      key_code: f
      modifiers: *opt_shift_key
    to:
    - key_code: x
      repeat: false
    - key_code: "y"
      repeat: false
    - key_code: u
      repeat: false
    conditions: *left_shifted_state

# ----- 中指シフト（右） -----

  # あ
  - type: basic
    from:
      key_code: 
      modifiers: *opt_shift_key
    to:
    - key_code: 
      repeat: false
    - key_code: 
      repeat: false
    conditions: *right_shifted_state

  # え
  - type: basic
    from:
      key_code: 
      modifiers: *opt_shift_key
    to:
    - key_code: 
      repeat: false
    - key_code: 
      repeat: false
    conditions: *right_shifted_state

  # お
  - type: basic
    from:
      key_code: 
      modifiers: *opt_shift_key
    to:
    - key_code: 
      repeat: false
    - key_code: 
      repeat: false
    conditions: *right_shifted_state

  # け
  - type: basic
    from:
      key_code: 
      modifiers: *opt_shift_key
    to:
    - key_code: 
      repeat: false
    - key_code: 
      repeat: false
    conditions: *right_shifted_state

  # せ
  - type: basic
    from:
      key_code: 
      modifiers: *opt_shift_key
    to:
    - key_code: 
      repeat: false
    - key_code: 
      repeat: false
    conditions: *right_shifted_state

  # そ
  # Symbol mode で定義
  - type: basic
    from:
      key_code: 
      modifiers: *opt_shift_key
    to:
    - key_code: 
      repeat: false
    - key_code: 
      repeat: false
    conditions: *right_shifted_state

  # ち
  - type: basic
    from:
      key_code: 
      modifiers: *opt_shift_key
    to:
    - key_code: 
      repeat: false
    - key_code: 
      repeat: false
    conditions: *right_shifted_state

  # つ
  - type: basic
    from:
      key_code: 
      modifiers: *opt_shift_key
    to:
    - key_code: 
      repeat: false
    - key_code: 
      repeat: false
    conditions: *right_shifted_state

  # ね
  - type: basic
    from:
      key_code: 
      modifiers: *opt_shift_key
    to:
    - key_code: 
      repeat: false
    - key_code: 
      repeat: false
    conditions: *right_shifted_state

  # ふ
  - type: basic
    from:
      key_code: 
      modifiers: *opt_shift_key
    to:
    - key_code: 
      repeat: false
    - key_code: 
      repeat: false
    conditions: *right_shifted_state

  # へ
  - type: basic
    from:
      key_code: 
      modifiers: *opt_shift_key
    to:
    - key_code: 
      repeat: false
    - key_code: 
      repeat: false
    conditions: *right_shifted_state

  # ほ
  - type: basic
    from:
      key_code: 
      modifiers: *opt_shift_key
    to:
    - key_code: 
      repeat: false
    - key_code: 
      repeat: false
    conditions: *right_shifted_state

  # み
  - type: basic
    from:
      key_code: 
      modifiers: *opt_shift_key
    to:
    - key_code: 
      repeat: false
    - key_code: 
      repeat: false
    conditions: *right_shifted_state

  # や
  - type: basic
    from:
      key_code: 
      modifiers: *opt_shift_key
    to:
    - key_code: 
      repeat: false
    - key_code: 
      repeat: false
    conditions: *right_shifted_state

  # よ
  - type: basic
    from:
      key_code: 
      modifiers: *opt_shift_key
    to:
    - key_code: 
      repeat: false
    - key_code: 
      repeat: false
    conditions: *right_shifted_state

  # ろ
  - type: basic
    from:
      key_code: 
      modifiers: *opt_shift_key
    to:
    - key_code: 
      repeat: false
    - key_code: 
      repeat: false
    conditions: *right_shifted_state

  # わ
  - type: basic
    from:
      key_code: 
      modifiers: *opt_shift_key
    to:
    - key_code: 
      repeat: false
    - key_code: 
      repeat: false
    conditions: *right_shifted_state

  # ご
  - type: basic
    from:
      key_code: 
      modifiers: *opt_shift_key
    to:
    - key_code: 
      repeat: false
    - key_code: 
      repeat: false
    conditions: *right_shifted_state

  # ざ
  - type: basic
    from:
      key_code: 
      modifiers: *opt_shift_key
    to:
    - key_code: 
      repeat: false
    - key_code: 
      repeat: false
    conditions: *right_shifted_state

  # ど
  - type: basic
    from:
      key_code: 
      modifiers: *opt_shift_key
    to:
    - key_code: 
      repeat: false
    - key_code: 
      repeat: false
    conditions: *right_shifted_state

  # び
  - type: basic
    from:
      key_code: 
      modifiers: *opt_shift_key
    to:
    - key_code: 
      repeat: false
    - key_code: 
      repeat: false
    conditions: *right_shifted_state

  # べ
  - type: basic
    from:
      key_code: 
      modifiers: *opt_shift_key
    to:
    - key_code: 
      repeat: false
    - key_code: 
      repeat: false
    conditions: *right_shifted_state

  # ぼ
  - type: basic
    from:
      key_code: 
      modifiers: *opt_shift_key
    to:
    - key_code: 
      repeat: false
    - key_code: 
      repeat: false
    conditions: *right_shifted_state

  # ぺ
  - type: basic
    from:
      key_code: 
      modifiers: *opt_shift_key
    to:
    - key_code: 
      repeat: false
    - key_code: 
      repeat: false
    conditions: *right_shifted_state

  # ぁ
  - type: basic
    from:
      key_code: 
      modifiers: *opt_shift_key
    to:
    - key_code: 
      repeat: false
    - key_code: 
      repeat: false
    conditions: *right_shifted_state

  # ぃ
  - type: basic
    from:
      key_code: 
      modifiers: *opt_shift_key
    to:
    - key_code: 
      repeat: false
    - key_code: 
      repeat: false
    conditions: *right_shifted_state

  # ぇ
  - type: basic
    from:
      key_code: 
      modifiers: *opt_shift_key
    to:
    - key_code: 
      repeat: false
    - key_code: 
      repeat: false
    conditions: *right_shifted_state

  # ぉ
  - type: basic
    from:
      key_code: 
      modifiers: *opt_shift_key
    to:
    - key_code: 
      repeat: false
    - key_code: 
      repeat: false
    conditions: *right_shifted_state

# ----- ベース -----

  # い
  - type: basic
    from:
      key_code: 
      modifiers: *opt_shift_key
    to:
    - key_code: 
      repeat: false
    - key_code: 
      repeat: false
    conditions: *base_state

  # う
  - type: basic
    from:
      key_code: 
      modifiers: *opt_shift_key
    to:
    - key_code: 
      repeat: false
    - key_code: 
      repeat: false
    conditions: *base_state

  # か
  - type: basic
    from:
      key_code: 
      modifiers: *opt_shift_key
    to:
    - key_code: 
      repeat: false
    - key_code: 
      repeat: false
    conditions: *base_state

  # き
  - type: basic
    from:
      key_code: 
      modifiers: *opt_shift_key
    to:
    - key_code: 
      repeat: false
    - key_code: 
      repeat: false
    conditions: *base_state

  # く
  - type: basic
    from:
      key_code: 
      modifiers: *opt_shift_key
    to:
    - key_code: 
      repeat: false
    - key_code: 
      repeat: false
    conditions: *base_state

  # こ
  - type: basic
    from:
      key_code: 
      modifiers: *opt_shift_key
    to:
    - key_code: 
      repeat: false
    - key_code: 
      repeat: false
    conditions: *base_state

  # し
  - type: basic
    from:
      key_code: 
      modifiers: *opt_shift_key
    to:
    - key_code: 
      repeat: false
    - key_code: 
      repeat: false
    conditions: *base_state

  # す
  - type: basic
    from:
      key_code: 
      modifiers: *opt_shift_key
    to:
    - key_code: 
      repeat: false
    - key_code: 
      repeat: false
    conditions: *base_state

  # た
  - type: basic
    from:
      key_code: 
      modifiers: *opt_shift_key
    to:
    - key_code: 
      repeat: false
    - key_code: 
      repeat: false
    conditions: *base_state

  # て
  # Symbol mode で定義
  - type: basic
    from:
      key_code: 
      modifiers: *opt_shift_key
    to:
    - key_code: 
      repeat: false
    - key_code: 
      repeat: false
    conditions: *base_state

  # と
  - type: basic
    from:
      key_code: 
      modifiers: *opt_shift_key
    to:
    - key_code: 
      repeat: false
    - key_code: 
      repeat: false
    conditions: *base_state

  # な
  - type: basic
    from:
      key_code: 
      modifiers: *opt_shift_key
    to:
    - key_code: 
      repeat: false
    - key_code: 
      repeat: false
    conditions: *base_state

  # に
  - type: basic
    from:
      key_code: 
      modifiers: *opt_shift_key
    to:
    - key_code: 
      repeat: false
    - key_code: 
      repeat: false
    conditions: *base_state

  # の
  - type: basic
    from:
      key_code: 
      modifiers: *opt_shift_key
    to:
    - key_code: 
      repeat: false
    - key_code: 
      repeat: false
    conditions: *base_state

  # は
  - type: basic
    from:
      key_code: 
      modifiers: *opt_shift_key
    to:
    - key_code: 
      repeat: false
    - key_code: 
      repeat: false
    conditions: *base_state

  # ま
  - type: basic
    from:
      key_code: 
      modifiers: *opt_shift_key
    to:
    - key_code: 
      repeat: false
    - key_code: 
      repeat: false
    conditions: *base_state

  # も
  - type: basic
    from:
      key_code: 
      modifiers: *opt_shift_key
    to:
    - key_code: 
      repeat: false
    - key_code: 
      repeat: false
    conditions: *base_state

  # ら
  - type: basic
    from:
      key_code: 
      modifiers: *opt_shift_key
    to:
    - key_code: 
      repeat: false
    - key_code: 
      repeat: false
    conditions: *base_state

  # り
  - type: basic
    from:
      key_code: 
      modifiers: *opt_shift_key
    to:
    - key_code: 
      repeat: false
    - key_code: 
      repeat: false
    conditions: *base_state

  # る
  - type: basic
    from:
      key_code: 
      modifiers: *opt_shift_key
    to:
    - key_code: 
      repeat: false
    - key_code: 
      repeat: false
    conditions: *base_state

  # ん
  - type: basic
    from:
      key_code: 
      modifiers: *opt_shift_key
    to:
    - key_code: 
      repeat: false
    - key_code: 
      repeat: false
    conditions: *base_state

  # が
  - type: basic
    from:
      key_code: 
      modifiers: *opt_shift_key
    to:
    - key_code: 
      repeat: false
    - key_code: 
      repeat: false
    conditions: *base_state

  # だ
  - type: basic
    from:
      key_code: 
      modifiers: *opt_shift_key
    to:
    - key_code: 
      repeat: false
    - key_code: 
      repeat: false
    conditions: *base_state

  # で
  - type: basic
    from:
      key_code: 
      modifiers: *opt_shift_key
    to:
    - key_code: 
      repeat: false
    - key_code: 
      repeat: false
    conditions: *base_state

  # っ
  - type: basic
    from:
      key_code: 
      modifiers: *opt_shift_key
    to:
    - key_code: 
      repeat: false
    - key_code: 
      repeat: false
    conditions: *base_state

  # ょ
  - type: basic
    from:
      key_code: 
      modifiers: *opt_shift_key
    to:
    - key_code: 
      repeat: false
    - key_code: 
      repeat: false
    conditions: *base_state

  # 読点
  - type: basic
    from:
      key_code: 
      modifiers: *opt_shift_key
    to:
    - key_code: 
      repeat: false
    - key_code: 
      repeat: false
    conditions: *base_state

  # 句点
  - type: basic
    from:
      key_code: 
      modifiers: *opt_shift_key
    to:
    - key_code: 
      repeat: false
    - key_code: 
      repeat: false
    conditions: *base_state

  # 長音符
  - type: basic
    from:
      key_code: 
      modifiers: *opt_shift_key
    to:
    - key_code: 
      repeat: false
    - key_code: 
      repeat: false
    conditions: *base_state

# ----- Symbol Mode -----

  # Symbol Mode Key（左シフト時）
  - type: basic
    from:
      key_code: r
      modifiers: *opt_shift_key
    to_if_alone:
    - key_code: p
      repeat: false
    - key_code: u
      repeat: false
    to:
    - set_variable:
        name: symbol_mode
        value: 1
    to_after_key_up:
    - set_variable:
        name: symbol_mode
        value: 0
    conditions: *left_shifted_state

  # Symbol Mode Key（右シフト時）
  - type: basic
    from:
      key_code: r
      modifiers: *opt_shift_key
    to_if_alone:
    - key_code: s
      repeat: false
    - key_code: o
      repeat: false
    to:
    - set_variable:
        name: symbol_mode
        value: 1
    to_after_key_up:
    - set_variable:
        name: symbol_mode
        value: 0
    conditions: *right_shifted_state

  # Symbol Mode Key（ベース時）
  - type: basic
    from:
      key_code: r
      modifiers: *opt_shift_key
    to_if_alone:
    - key_code: t
      repeat: false
    - key_code: e
      repeat: false
    to:
    - set_variable:
        name: symbol_mode
        value: 1
    to_after_key_up:
    - set_variable:
        name: symbol_mode
        value: 0
    conditions: *base_state

  # Y → 中黒
  - type: basic
    from:
      key_code: "y"
    to:
    - key_code: backslash
      repeat: false
    - key_code: "y"
      repeat: false
    conditions: symbol_mode_valid

  # U → Em ダッシュ
  - type: basic
    from:
      key_code: u
    to:
    - key_code: backslash
      repeat: false
    - key_code: u
      repeat: false
    conditions: symbol_mode_valid

  # I → 三点リーダ
  - type: basic
    from:
      key_code: i
    to:
    - key_code: backslash
      repeat: false
    - key_code: i
      repeat: false
    conditions: symbol_mode_valid

  # O → コロン
  - type: basic
    from:
      key_code: o
    to:
    - key_code: backslash
      repeat: false
    - key_code: o
      repeat: false
    conditions: symbol_mode_valid

  # P → 波ダッシュ
  - type: basic
    from:
      key_code: p
    to:
    - key_code: backslash
      repeat: false
    - key_code: p
      repeat: false
    conditions: symbol_mode_valid

  # H → Left Arrow
  - type: basic
    from:
      key_code: h
    to:
    - key_code: backslash
      repeat: false
    - key_code: h
      repeat: false
    conditions: symbol_mode_valid

  # J → Down Arrow
  - type: basic
    from:
      key_code: j
    to:
    - key_code: backslash
      repeat: false
    - key_code: j
      repeat: false
    conditions: symbol_mode_valid

  # K → Up Arrow
  - type: basic
    from:
      key_code: k
    to:
    - key_code: backslash
      repeat: false
    - key_code: k
      repeat: false
    conditions: symbol_mode_valid

  # L → Right Arrow
  - type: basic
    from:
      key_code: l
    to:
    - key_code: backslash
      repeat: false
    - key_code: l
      repeat: false
    conditions: symbol_mode_valid

  # Semicolon → セミコロン
  - type: basic
    from:
      key_code: semicolon
    to:
    - key_code: backslash
      repeat: false
    - key_code: semicolon
      repeat: false
    conditions: symbol_mode_valid

  # Colon → コロン
  - type: basic
    from:
      key_code: semicolon
      modifiers: *mand_shift_key
    to:
    - key_code: backslash
      repeat: false
    - key_code: semicolon
      modifiers: *to_shift_key
      repeat: false
    conditions: symbol_mode_valid

  # Single Quote → シングルクォート
  - type: basic
    from:
      key_code: quote
    to:
    - key_code: backslash
      repeat: false
    - key_code: quote
      repeat: false
    conditions: symbol_mode_valid

  # Double Quote → ダブルクォート
  - type: basic
    from:
      key_code: quote
      modifiers: *mand_shift_key
    to:
    - key_code: backslash
      repeat: false
    - key_code: quote
      modifiers: *to_shift_key
      repeat: false
    conditions: symbol_mode_valid

  # N → 乗算記号
  - type: basic
    from:
      key_code: "n"
    to:
    - key_code: backslash
      repeat: false
    - key_code: "n"
      repeat: false
    conditions: symbol_mode_valid

  # M → 全角スペース
  - type: basic
    from:
      key_code: m
    to:
    - key_code: backslash
      repeat: false
    - key_code: m
      repeat: false
    conditions: symbol_mode_valid

  # Comma → コンマ
  - type: basic
    from:
      key_code: comma
    to:
    - key_code: backslash
      repeat: false
    - key_code: comma
      repeat: false
    conditions: symbol_mode_valid

  # Period → ピリオド
  - type: basic
    from:
      key_code: period
    to:
    - key_code: backslash
      repeat: false
    - key_code: period
      repeat: false
    conditions: symbol_mode_valid

  # Less Than → 感嘆符
  - type: basic
    from:
      key_code: comma
      modifiers: *mand_shift_key
    to:
    - key_code: backslash
      repeat: false
    - key_code: comma
      modifiers: *to_shift_key
      repeat: false
    conditions: symbol_mode_valid

  # Greater Than → 疑問符
  - type: basic
    from:
      key_code: period
      modifiers: *mand_shift_key
    to:
    - key_code: backslash
      repeat: false
    - key_code: period
      modifiers: *to_shift_key
      repeat: false
    conditions: symbol_mode_valid

  # Slash → スラッシュ
  - type: basic
    from:
      key_code: slash
    to:
    - key_code: backslash
      repeat: false
    - key_code: slash
      repeat: false
    conditions: symbol_mode_valid

  # Question Mark → 疑問符
  - type: basic
    from:
      key_code: slash
      modifiers: *mand_shift_key
    to:
    - key_code: backslash
      repeat: false
    - key_code: slash
      modifiers: *to_shift_key
      repeat: false
    conditions: symbol_mode_valid

  # Bracket → 山括弧／隅付き括弧
  - type: basic
    from:
      key_code: open_bracket
      modifiers: *opt_shift_key
    to:
    - key_code: backslash
      repeat: false
    - key_code: open_bracket
      repeat: false
    conditions: symbol_mode_valid

  - type: basic
    from:
      key_code: close_bracket
      modifiers: *opt_shift_key
    to:
    - key_code: backslash
      repeat: false
    - key_code: close_bracket
      repeat: false
    conditions: symbol_mode_valid

  # Paren → 一重引用符／二重引用符
  - type: basic
    from:
      key_code: "9"
      modifiers: *mand_shift_key
    to:
    - key_code: backslash
      repeat: false
    - key_code: "9"
      modifiers: *to_shift_key
      repeat: false
    conditions: symbol_mode_valid

  - type: basic
    from:
      key_code: "0"
      modifiers: *mand_shift_key
    to:
    - key_code: backslash
      repeat: false
    - key_code: "0"
      repeat: false
      modifiers: *to_shift_key
    conditions: symbol_mode_valid
