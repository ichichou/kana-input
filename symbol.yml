title: "09-4. 記号入力"

# ===== Aliases =====

aliases:

# ----- Modifier Keys -----

- from/modifiers: &optional_shift_key
    optional:
    - shift

- from/modifiers: &mandatory_shift_key
    mandatory:
    - shift

- to/modifiers: &to_shift_key
  - shift

# ----- Conditions -----

- conditions: &symbol_mode
  - type: variable_if
    name: symbol_mode
    value: 1
  - type: frontmost_application_unless
    bundle_identifiers:
    - "^com\\.apple\\.loginwindow$"

- conditions: &base_state
  - type: input_source_if
    input_sources:
    - language: ja
  - type: variable_unless
    name: kanchoku_mode
    value: 1
  - type: variable_unless
    name: symbol_mode
    value: 1
  - type: frontmost_application_unless
    bundle_identifiers:
    - "^com\\.apple\\.loginwindow$"

# ===== Rules =====

rules:
- description: "[Japanese Input] 同時打鍵で記号入力"
  manipulators:

  # RF → 中黒
  - type: basic
    from:
      simultaneous:
      - key_code: r
      - key_code: f
    to:
    - key_code: quote
      modifiers: *to_shift_key
      repeat: false
    conditions: *base_state

  # RG → 中黒
  - type: basic
    from:
      simultaneous:
      - key_code: r
      - key_code: g
    to:
    - key_code: quote
      modifiers: *to_shift_key
      repeat: false
    conditions: *base_state

  # FV → 感嘆符
  - type: basic
    from:
      simultaneous:
      - key_code: f
      - key_code: v
    to:
    - key_code: "1"
      modifiers: *to_shift_key
      repeat: false
    conditions: *base_state

  # FB → 感嘆符
  - type: basic
    from:
      simultaneous:
      - key_code: f
      - key_code: b
    to:
    - key_code: "1"
      modifiers: *to_shift_key
      repeat: false
    conditions: *base_state

  # UJ → スラッシュ
  - type: basic
    from:
      simultaneous:
      - key_code: u
      - key_code: j
    to:
    - key_code: slash
      repeat: false
    conditions: *base_state

  # UH → スラッシュ
  - type: basic
    from:
      simultaneous:
      - key_code: u
      - key_code: h
    to:
    - key_code: slash
      repeat: false
    conditions: *base_state

  # JM → 疑問符
  - type: basic
    from:
      simultaneous:
      - key_code: j
      - key_code: m
    to:
    - key_code: slash
      modifiers: *to_shift_key
      repeat: false
    conditions: *base_state

  # JN → 疑問符
  - type: basic
    from:
      simultaneous:
      - key_code: j
      - key_code: "n"
    to:
    - key_code: slash
      modifiers: *to_shift_key
      repeat: false
    conditions: *base_state

  # FG → 鉤括弧
  - type: basic
    from:
      simultaneous:
      - key_code: f
      - key_code: g
    to:
    - key_code: open_bracket
    - key_code: close_bracket
    - key_code: left_arrow
      repeat: false
    conditions: *base_state

  # HJ → 丸括弧
  - type: basic
    from:
      simultaneous:
      - key_code: h
      - key_code: j
    to:
    - key_code: "9"
      modifiers: *to_shift_key
    - key_code: "0"
      modifiers: *to_shift_key
    - key_code: left_arrow
      repeat: false
    conditions: *base_state

- description: "[Japanese Input] Symbol Mode"
  manipulators:

  # Symbol Mode Key
  # R
  - type: basic
    from:
      key_code: r
      modifiers: *optional_shift_key
    to_if_alone:
    - key_code: r
      repeat: false
    to:
    - set_variable:
        name: symbol_mode
        value: 1
    to_after_key_up:
    - set_variable:
        name: symbol_mode
        value: 0
    conditions: *base_state

# 入力される記号は仮名テーブルで定義する

  # Y
  - type: basic
    from:
      key_code: "y"
    to:
    - key_code: backslash
    - key_code: "y"
      repeat: false
    conditions: *symbol_mode

  # U
  - type: basic
    from:
      key_code: u
    to:
    - key_code: backslash
    - key_code: u
      repeat: false
    conditions: *symbol_mode

  # I
  - type: basic
    from:
      key_code: i
    to:
    - key_code: backslash
    - key_code: i
      repeat: false
    conditions: *symbol_mode

  # O
  - type: basic
    from:
      key_code: o
    to:
    - key_code: backslash
    - key_code: o
      repeat: false
    conditions: *symbol_mode

  # P
  - type: basic
    from:
      key_code: p
    to:
    - key_code: backslash
    - key_code: p
      repeat: false
    conditions: *symbol_mode

  # H
  - type: basic
    from:
      key_code: h
    to:
    - key_code: backslash
    - key_code: h
      repeat: false
    conditions: *symbol_mode

  # J
  - type: basic
    from:
      key_code: j
    to:
    - key_code: backslash
    - key_code: j
      repeat: false
    conditions: *symbol_mode

  # K
  - type: basic
    from:
      key_code: k
    to:
    - key_code: backslash
    - key_code: k
      repeat: false
    conditions: *symbol_mode

  # L
  - type: basic
    from:
      key_code: l
    to:
    - key_code: backslash
    - key_code: l
      repeat: false
    conditions: *symbol_mode

  # Semicolon
  - type: basic
    from:
      key_code: semicolon
    to:
    - key_code: backslash
    - key_code: semicolon
      repeat: false
    conditions: *symbol_mode

  # Colon
  - type: basic
    from:
      key_code: semicolon
      modifiers: *mandatory_shift_key
    to:
    - key_code: backslash
    - key_code: semicolon
      modifiers: *to_shift_key
      repeat: false
    conditions: *symbol_mode

  # Single Quote
  - type: basic
    from:
      key_code: quote
    to:
    - key_code: backslash
    - key_code: quote
      repeat: false
    conditions: *symbol_mode

  # Double Quote
  - type: basic
    from:
      key_code: quote
      modifiers: *mandatory_shift_key
    to:
    - key_code: backslash
    - key_code: quote
      modifiers: *to_shift_key
      repeat: false
    conditions: *symbol_mode

  # N
  - type: basic
    from:
      key_code: "n"
    to:
    - key_code: backslash
    - key_code: "n"
      repeat: false
    conditions: *symbol_mode

  # M
  - type: basic
    from:
      key_code: m
    to:
    - key_code: backslash
    - key_code: m
      repeat: false
    conditions: *symbol_mode

  # Comma
  - type: basic
    from:
      key_code: comma
    to:
    - key_code: backslash
    - key_code: comma
      repeat: false
    conditions: *symbol_mode

  # Period
  - type: basic
    from:
      key_code: period
    to:
    - key_code: backslash
    - key_code: period
      repeat: false
    conditions: *symbol_mode

  # Less Than
  - type: basic
    from:
      key_code: comma
      modifiers: *mandatory_shift_key
    to:
    - key_code: backslash
    - key_code: comma
      modifiers: *to_shift_key
      repeat: false
    conditions: *symbol_mode

  # Greater Than
  - type: basic
    from:
      key_code: period
      modifiers: *mandatory_shift_key
    to:
    - key_code: backslash
    - key_code: period
      modifiers: *to_shift_key
      repeat: false
    conditions: *symbol_mode

  # Slash
  - type: basic
    from:
      key_code: slash
    to:
    - key_code: backslash
    - key_code: slash
      repeat: false
    conditions: *symbol_mode

  # Question Mark
  - type: basic
    from:
      key_code: slash
      modifiers: *mandatory_shift_key
    to:
    - key_code: backslash
    - key_code: slash
      modifiers: *to_shift_key
      repeat: false
    conditions: *symbol_mode

  # Bracket
  - type: basic
    from:
      key_code: open_bracket
    to:
    - key_code: backslash
    - key_code: open_bracket
      repeat: false
    conditions: *symbol_mode

  - type: basic
    from:
      key_code: close_bracket
    to:
    - key_code: backslash
    - key_code: close_bracket
      repeat: false
    conditions: *symbol_mode

  # Brace
  - type: basic
    from:
      key_code: open_bracket
      modifiers: *mandatory_shift_key
    to:
    - key_code: backslash
    - key_code: open_bracket
      modifiers: *to_shift_key
      repeat: false
    conditions: *symbol_mode

  - type: basic
    from:
      key_code: close_bracket
      modifiers: *mandatory_shift_key
    to:
    - key_code: backslash
    - key_code: close_bracket
      modifiers: *to_shift_key
      repeat: false
    conditions: *symbol_mode

  # Paren
  - type: basic
    from:
      key_code: "9"
      modifiers: *mandatory_shift_key
    to:
    - key_code: backslash
    - key_code: "9"
      modifiers: *to_shift_key
      repeat: false
    conditions: *symbol_mode

  - type: basic
    from:
      key_code: "0"
      modifiers: *mandatory_shift_key
    to:
    - key_code: backslash
    - key_code: "0"
      repeat: false
      modifiers: *to_shift_key
    conditions: *symbol_mode
